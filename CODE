
1. Create a database named employee, then import data_science_team.csv proj_table.csv and emp_record_table.csv into the employee database from the given resources.

CREATE database employee;

3. Write a query to fetch EMP_ID, FIRST_NAME, LAST_NAME, GENDER, and DEPARTMENT from the employee record table, and 
-- make a list of employees and details of their department.

SELECT 
    emp_id, first_name, last_name, gender, dept
FROM
    emp_record_table;


4. Write a query to fetch EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPARTMENT, and EMP_RATING if the EMP_RATING is: 
●	less than two
SELECT 
    emp_id, first_name, LAST_NAME, GENDER, DEPT, EMP_RATING
FROM
    emp_record_table
WHERE
    EMP_RATING < 2;

-- ●	greater than four
SELECT 
    emp_id, first_name, last_name, gender, dept, emp_rating
FROM
    emp_record_table
WHERE
    EMP_RATING > 4;
    
●	between two and four
SELECT 
    emp_id, first_name, last_name, gender, dept, emp_rating
FROM
    emp_record_table
WHERE
    emp_rating BETWEEN 2 AND 4;
    
5.Write a query to concatenate the FIRST_NAME and the LAST_NAME of employees in the Finance department from the employee table 
and then give the resultant column alias as NAME.

select first_name , last_name , concat(first_name,' ',last_name) as 'Name' ,  Dept
from emp_record_table
where dept = 'Finance';

6. Write a query to list only those employees who have someone reporting to them. Also, show the number of reporters (including the President).

SELECT 
    m.EMP_ID,
    m.FIRST_NAME,
    m.LAST_NAME,
    m.ROLE,
    m.EXP,
    COUNT(e.EMP_ID) AS 'EMP_COUNT'
FROM
    emp_record_table m
        INNER JOIN
    emp_record_table e ON m.EMP_ID = e.MANAGER_ID
GROUP BY m.EMP_ID , m.FIRST_NAME , m.LAST_NAME , m.ROLE , m.exp
ORDER BY m.EMP_ID;

7. Write a query to list down all the employees from the healthcare and finance departments using union. Take data from the employee record table.
   
SELECT 
    emp_id, first_name, last_name, role, dept
FROM
    emp_record_table
WHERE
    dept = 'Healthcare' 
UNION ALL SELECT 
    emp_id, first_name, last_name, role, dept
FROM
    emp_record_table
WHERE
    dept = 'Finance';
   

8. Write a query to list down employee details such as EMP_ID, FIRST_NAME, LAST_NAME, ROLE, DEPARTMENT, and EMP_RATING grouped by dept.
 Also include the respective employee rating along with the max emp rating for the department.
 
 select emp_id , first_name ,  last_name  , role , dept , emp_rating ,
  max(emp_rating) over(partition by dept) as 'max_emp_rating'
from emp_record_table
group by dept , emp_id , first_name ,  last_name  , role , emp_rating;
   
9. Write a query to calculate the minimum and the maximum salary of the employees in each role. Take data from the employee record table.   
   
SELECT 
    role,
    MIN(salary) AS Minimum_salary,
    MAX(salary) AS Maximum_salary
FROM
    emp_record_table
GROUP BY role;


10. Write a query to assign ranks to each employee based on their experience. Take data from the employee record table.
   
select emp_id , first_name , last_name , exp ,
 rank() over(order by EXP) as exp_rank
from emp_record_table;


11. Write a query to create a view that displays employees in various countries whose salary is more than six thousand.
Take data from the employee record table.
   
SELECT 
    EMP_ID, FIRST_NAME, LAST_NAME, ROLE, DEPT, SALARY, COUNTRY
FROM
    emp_record_table
WHERE
    SALARY > 6000
ORDER BY SALARY DESC;
   
12.	Write a nested query to find employees with experience of more than ten years. Take data from the employee record table.

SELECT 
    EMP_ID,
    FIRST_NAME,
    LAST_NAME,
    ROLE,
    DEPT,
    SALARY,
    COUNTRY,
    EXP
FROM
    emp_record_table
WHERE
    EMP_ID IN (SELECT 
            EMP_ID
        FROM
            EMP_RECORD_TABLE
        WHERE
            EXP > 10)
ORDER BY EXP DESC;
   
13. Write a query to create a stored procedure to retrieve the details of the employees whose experience is more than three years. Take data from the employee record table.   

DELIMITER //
CREATE PROCEDURE EMPLOYEE_EXP ()
BEGIN 
SELECT EMP_ID , FIRST_NAME , LAST_NAME,ROLE ,DEPT , EMP_RATING , SALARY , EXP
FROM EMP_RECORD_TABLE
WHERE EXP > 3
ORDER BY EXP;
END //
   
CALL EMPLOYEE_EXP()
   

14.	Write a query using stored functions in the project table to check whether the job profile assigned to each employee in the data science team matches the organization’s set standard.

The standard being
For an employee with experience less than or equal to 2 years assign 'JUNIOR DATA SCIENTIST',
For an employee with the experience of 2 to 5 years assign 'ASSOCIATE DATA SCIENTIST',
For an employee with the experience of 5 to 10 years assign 'SENIOR DATA SCIENTIST',
For an employee with the experience of 10 to 12 years assign 'LEAD DATA SCIENTIST',
For an employee with the experience of 12 to 16 years assign 'MANAGER'.

DELIMITER //
CREATE PROCEDURE EMP_PROFILE()
BEGIN 
SELECT EMP_ID ,FIRST_NAME , LAST_NAME , EXP , 
CASE WHEN EXP BETWEEN 0 AND 2 THEN 'JUNIOR DATA SCIENTIST'
WHEN EXP BETWEEN  2 AND 5 THEN 'ASSOCIATE DATA SCIENTIST'
WHEN EXP BETWEEN 5 AND 10 THEN 'SENIOR DATA SCIENTIST'
WHEN EXP BETWEEN 10 AND 12 THEN  'LEAD DATA SCIENTIST'
ELSE 'MANAGER'
END AS 'PROFILE'
FROM EMP_RECORD_TABLE;
END //

CALL EMP_PROFILE();


15. Create an index to improve the cost and performance of the query to find the employee whose FIRST_NAME is ‘Eric’ in the employee table after checking the execution plan.
   
CREATE INDEX IDX_FIRST_NAME1
ON  EMP_RECORD_TABLE(FIRST_NAME(20));
SELECT * FROM EMP_RECORD_TABLE
WHERE FIRST_NAME = 'ERIC';
   
16.	Write a query to calculate the bonus for all the employees, based on their ratings and salaries (Use the formula: 5% of salary * employee rating).

SELECT 
    EMP_ID,
    FIRST_NAME,
    LAST_NAME,
    ROLE,
    DEPT,
    SALARY,
    ROUND(((SALARY * .05) * EMP_RATING), 2) AS BONUS
FROM
    EMP_RECORD_TABLE
ORDER BY EMP_ID

17. Write a query to calculate the average salary distribution based on the continent and country. Take data from the employee record table.

SELECT COUNTRY,
AVG(salary)OVER(PARTITION BY COUNTRY)AVG_salary_IN_COUNTRY,
CONTINENT,
AVG(salary)OVER(PARTITION BY CONTINENT)AVG_salary_IN_CONTINENT
FROM emp_record_table
